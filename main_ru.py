# ----------------------------------------------- #
# Project Name          : lions       			  #
# Author Name           : Lev Babushkin           #
# File Name             : main.py                 #
# Contact in telegram   : @levaau                 #
# ----------------------------------------------- #
import telebot
import random
import sqlite3
import signal
import sys
import time
import os
from telebot import types
from dotenv import load_dotenv
load_dotenv()
token = os.getenv('TOKEN')
me = os.getenv('ME')

bot = telebot.TeleBot(token)
# ----------------------------------------------- #


def exit_gracefully(signal, frame):
    print(" Stopping the bot...")
    print("# ---------------------end((------------------------- #\n")
    bot.send_message(me, "shutting down...")
    sys.exit(0)


signal.signal(signal.SIGINT, exit_gracefully)

get_data = "SELECT quser_name, soulmate_name, user_task, " \
           "user_2task, user_3task, task_cost, task_2cost, " \
           "task_3cost, user_reward, reward_cost, user_2reward, " \
           "reward_2cost, user_3reward, reward_3cost, l_balance " \
           "FROM userdata WHERE id = (SELECT MAX(id) FROM userdata)"


while True:
    try:
        # ----------------------------------------------- #
        # MADE:

        # fix terminal, make a protection of user_id

        # NEED: delete useless messages, add custom font, allow 2
        # users to work on the same database. make a real donation request,
        # design repeater, make suggest button in registration and editting
        # X-step tutorial with buttons
        print("\n# ---------------------start-------------------------- #")
        print("hello, this is a small addition to the bot")
        bot.send_message(me, "turning on...")

        @bot.message_handler(commands=["search"])
        def search(message):
            bot.send_message(
                message.chat.id, "Please enter the name "
                "of the SQL database file.")
            bot.register_next_step_handler(message, search_database)

        def search_database(message):
            try:
                db_filename = message.text.strip().lower() + '.db'
                conn = sqlite3.connect(db_filename)
                cursor = conn.cursor()
                cursor.execute(get_data)

                user_data = cursor.fetchone()
                conn.close()
                if user_data:
                    (
                        quser_name,
                        soulmate_name,
                        user_task,
                        user_2task,
                        user_3task,
                        task_cost,
                        task_2cost,
                        task_3cost,
                        user_reward,
                        reward_cost,
                        user_2reward,
                        reward_2cost,
                        user_3reward,
                        reward_3cost,
                        l_balance,
                    ) = user_data

                    response = (
                        f"üíñ{quser_name} –∏ {soulmate_name}üíñ\n"
                        f"–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
                        f"1. {user_task} - –∑–∞ {task_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2task} - –∑–∞ {task_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3task} - –∑–∞ {task_3cost} –ª—å–≤—è—Ç\n"
                        f"–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
                        f"1. {user_reward} - –∑–∞ {reward_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2reward} - –∑–∞ {reward_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3reward} - –∑–∞ {reward_3cost} –ª—å–≤—è—Ç\n"
                        f"–ë–∞–ª–∞–Ω—Å –ª—å–≤—è—Ç: {l_balance}")
                bot.send_message(me, response)
            except Exception as e:
                bot.send_message(
                    message.chat.id,
                    f"An error occurred "
                    f"while searching the database: {str(e)}",
                )

        def get_user_db(user_id):
            conn = sqlite3.connect(f"{user_id}.db")
            cursor = conn.cursor()
            return conn, cursor

        def create_user_table(user_id):
            conn, cursor = get_user_db(user_id)
            cursor.execute("""CREATE TABLE IF NOT EXISTS userdata
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                            quser_name TEXT, soulmate_name TEXT,
                            user_task TEXT, user_2task TEXT,
                            user_3task TEXT, task_cost INTEGER,
                            task_2cost INTEGER, task_3cost INTEGER,
                            user_reward TEXT, user_2reward TEXT,
                            user_3reward TEXT, reward_cost INTEGER,
                            reward_2cost INTEGER, reward_3cost INTEGER,
                            l_balance INTEGER DEFAULT 0)""")
            conn.commit()
            conn.close()

        @bot.message_handler(commands=["start"])
        def greet_user(message):
            try:
                user_id = message.from_user.id
                conn, cursor = get_user_db(user_id)
                cursor.execute(
                    "SELECT quser_name, soulmate_name, "
                    "user_task, user_2task, user_3task, "
                    "task_cost, task_2cost, task_3cost, "
                    "user_reward, reward_cost, user_2reward, "
                    "reward_2cost, user_3reward, reward_3cost, "
                    "l_balance FROM userdata WHERE id = "
                    "(SELECT MAX(id) FROM userdata)"
                )
                user_data = cursor.fetchone()
                conn.close()
                if user_data:
                    (
                        quser_name,
                        soulmate_name,
                        user_task,
                        user_2task,
                        user_3task,
                        task_cost,
                        task_2cost,
                        task_3cost,
                        user_reward,
                        reward_cost,
                        user_2reward,
                        reward_2cost,
                        user_3reward,
                        reward_3cost,
                        l_balance,
                    ) = user_data

                    response = (
                        f"üíñ{quser_name} –∏ {soulmate_name}üíñ\n"
                        f"–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
                        f"1. {user_task} - –∑–∞ {task_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2task} - –∑–∞ {task_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3task} - –∑–∞ {task_3cost} –ª—å–≤—è—Ç\n"
                        f"–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
                        f"1. {user_reward} - –∑–∞ {reward_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2reward} - –∑–∞ {reward_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3reward} - –∑–∞ {reward_3cost} –ª—å–≤—è—Ç\n"
                        f"–ë–∞–ª–∞–Ω—Å –ª—å–≤—è—Ç: {l_balance}")

                photo = "lions2.jpeg"
                file = open("./" + photo, "rb")
                bot.send_photo(user_id, file)
                bot.send_message(user_id, response)
                markup = telebot.types.InlineKeyboardMarkup()
                button1 = telebot.types.InlineKeyboardButton(
                    "–¥–∞", callback_data="button1")
                button2 = telebot.types.InlineKeyboardButton(
                    "–Ω–µ—Ç", callback_data="button2")
                markup.add(button1, button2)
                bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                                 reply_markup=markup)
            except Exception:
                user_id = message.from_user.id
                create_user_table(user_id)
                markup = telebot.types.InlineKeyboardMarkup()
                button1 = telebot.types.InlineKeyboardButton(
                    "–¥–∞–ª—å—à–µ", callback_data="tut1")
                markup.add(button1)
                photo = "lions_share.jpeg"
                file = open("./" + photo, "rb")
                response = ('–û—Ç–Ω–æ—à–µ–Ω–∏—è - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–∏—è '
                            '–∫—Ä–∞—Å–∏–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. C –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ '
                            '–≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –æ–±—ã–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ '
                            '—á—É–¥–µ—Å–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è '
                            '–¥–ª—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∏–º —Ü–µ–Ω—É –≤ '
                            '–ª—å–≤—è—Ç–∞—Ö –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ, –∫–∞–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è '
                            '–≤–µ—Å–µ–ª—å–µ.\n–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ '
                            '–ª—å–≤—è—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö –∫–∞–∫ "–ü–æ–º—ã—Ç—å '
                            '–ø–æ—Å—É–¥—É" –∏–ª–∏ "–°—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏". –ß–µ–º '
                            '–±–æ–ª—å—à–µ –ª—å–≤—è—Ç –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ '
                            '–Ω–∞–≥—Ä–∞–¥ –≤–∞—Å –æ–∂–∏–¥–∞–µ—Ç.')
                bot.send_photo(user_id, file, caption=response,
                               reply_markup=markup)

        def tutorial2(message):
            user_id = message.from_user.id
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–¥–∞–ª—å—à–µ", callback_data="tut2")
            markup.add(button1)
            photo = "lions_share.jpeg"
            file = open("./" + photo, "rb")
            response = ('–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–æ–º–∞–Ω—Ç–∏–∫–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —É–¥–∏–≤–ª—è–π—Ç–µ '
                        '—Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∑–Ω–∞—á–∏–º—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏. "–ü–æ—Ö–æ–¥ –≤ '
                        '—Ä–µ—Å—Ç–æ—Ä–∞–Ω" –∏–ª–∏ "–ó–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª–∏" ‚Äî –≤—Å–µ–≥–æ –ª–∏—à—å '
                        '–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π. C —ç—Ç–∏–º –±–æ—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è '
                        '–ª—å–≤—è—Ç–∞–º–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —ç—Ç–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –≤–¥–≤–æ–µ–º, '
                        '–¥–µ–ª–∞—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º.')

            bot.send_photo(user_id, file, caption=response,
                           reply_markup=markup)

        def tutorial3(message):
            user_id = message.from_user.id
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–¥–∞–ª—å—à–µ", callback_data="tut3")
            markup.add(button1)
            photo = "lions_share.jpeg"
            file = open("./" + photo, "rb")
            response = ('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ '
                        '–º–µ–Ω—é:\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ '
                        '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å —É–∫–∞–∑–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏ '
                        '–¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í—ã –ø—Ä–∏–¥—É–º–∞–µ—Ç–µ –∑–∞–¥–∞—á–∏, '
                        '–Ω–∞–≥—Ä–∞–¥—ã –∏ –∏—Ö —Ü–µ–Ω—ã –≤ –ª—å–≤—è—Ç–∞—Ö –¥–ª—è –≤–∞—à–µ–≥–æ '
                        '–ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª—å–≤—è—Ç:\n'
                        '–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —É–≤–∏–¥–µ—Ç–µ –º–µ–Ω—é, '
                        '–æ–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –ª—å–≤–µ–Ω–∫–∞. –í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ '
                        '–ø—Ä–∏–±–∞–≤–ª—è—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å –ª—å–≤—è—Ç —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.')

            bot.send_photo(user_id, file, caption=response,
                           reply_markup=markup)

        def tutorial4(message):
            user_id = message.from_user.id
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–¥–∞–ª—å—à–µ", callback_data="tut4")
            markup.add(button1)
            photo = "lions_share.jpeg"
            file = open("./" + photo, "rb")
            response = ('–í –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É–¥–æ–±–Ω–æ–µ '
                        '–º–µ–Ω—é, '
                        '–∫–æ—Ç–æ—Ä–æ–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º '
                        '—Ñ—É–Ω–∫—Ü–∏—è–º:\n\nProfile: –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, '
                        '–∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á, '
                        '–Ω–∞–≥—Ä–∞–¥, –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –±–∞–ª–∞–Ω—Å –ª—å–≤—è—Ç.\n\n'
                        'Suggest: –ü–æ–ª—É—á–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—è 3 —Å–ª—É—á–∞–π–Ω—ã—Ö '
                        '–∑–∞–¥–∞—á–∏ –∏ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω—ã —Å–≤–µ–∂–∏–µ '
                        '–∏–¥–µ–∏.\n\nMain: –≠—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é, '
                        '–≥–¥–µ –≤—ã –ª–µ–≥–∫–æ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å–æ–º –ª—å–≤—è—Ç. '
                        '–î–æ–±–∞–≤—å—Ç–µ '
                        '–∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –ª—å–≤—è—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Å–∞–Ω–∏—è–º–∏.\n\n'
                        'Help: –í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç '
                        '—Ç—É—Ç–æ—Ä–∏–∞–ª –∑–∞–Ω–æ–≤–æ, –∞ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ—à–∏—Ç –ø—Ä–æ–±–ª–µ–º—É - '
                        '–ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º.\n\n'
                        'Share: –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º —Å –≤–∞—à–∏–º '
                        '–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –ø–æ–∑–≤–æ–ª—è—è –µ–º—É –∏–ª–∏ –µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ '
                        '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± '
                        '–≤–º–µ—Å—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.\n\nConnect: '
                        '–í—ã–±–µ—Ä–µ—Ç–µ —ç—Ç–æ —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, '
                        '–≠—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å '
                        '–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '
                        '–≤–º–µ—Å—Ç–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–∫—Ä–µ–ø–ª—è—è –≤–∞—à—É —Å–≤—è–∑—å.')
            bot.send_photo(user_id, file, caption=response,
                           reply_markup=markup)

        def ask_quser_name(message):
            user_id = message.from_user.id
            quser_name = message.text.strip().lower()
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "INSERT INTO userdata (quser_name, l_balance) VALUES (?, 0)",
                (quser_name, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å "
                             "–∏–º—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏")

            bot.register_next_step_handler(message, ask_soulmate_name)

        # Function to record the user's soulmate_name in the database
        def ask_soulmate_name(message):
            user_id = message.from_user.id
            soulmate_name = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET soulmate_name = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (soulmate_name, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ö–∞–∫—É—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É "
                             "–≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π "
                             "–ø–æ–ª–æ–≤–∏–Ω–∫–∏?")

            bot.register_next_step_handler(message, ask_user_task)

        # ----------------------------------------------- #

        def ask_user_task(message):
            user_id = message.from_user.id
            user_task = message.text.strip().lower()
            # sql
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_task = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_task, ),
            )
            conn.commit()
            conn.close()
            # cost
            bot.send_message(user_id, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –°–∫–æ–ª—å–∫–æ "
                             "–ª—å–≤—è—Ç –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ "
                             "–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏?")

            bot.register_next_step_handler(message, ask_task_cost)

        def ask_task_cost(message):
            # cost
            user_id = message.from_user.id
            task_cost = message.text.strip().lower()
            # sql
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  task_cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (task_cost, ),
            )
            conn.commit()
            conn.close()
            # buttons
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button10")
            button2 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button11")
            markup.add(button1, button2)
            bot.send_message(user_id, "–í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å "
                             "–≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π "
                             "–ø–æ–ª–æ–≤–∏–Ω–∫–∏?", reply_markup=markup)

        def ask_user_2task(message):
            user_id = message.from_user.id
            user_2task = message.text.strip().lower()
            # sql
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_2task = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_2task, ),
            )
            conn.commit()
            conn.close()
            # cost
            bot.send_message(user_id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –°–∫–æ–ª—å–∫–æ "
                             "–ª—å–≤—è—Ç –¥–æ–ª–∂–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è "
                             "–ø–æ–ª–æ–≤–∏–Ω–∫–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏?")

            bot.register_next_step_handler(message, ask_2task_cost)

        def ask_2task_cost(message):
            user_id = message.from_user.id
            task_2cost = message.text.strip().lower()
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  task_2cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (task_2cost, ),
            )
            conn.commit()
            conn.close()
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button10")
            button2 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button12")
            markup.add(button1, button2)
            bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã "
                             "–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ—Ç—å—é –∑–∞–¥–∞—á—É –¥–ª—è –≤–∞—à–µ–π "
                             "–≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?", reply_markup=markup)

        def ask_user_3task(message):
            user_id = message.from_user.id
            user_3task = message.text.strip().lower()
            # sql
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_3task = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_3task, ),
            )
            conn.commit()
            conn.close()
            # cost
            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç "
                             "–¥–æ–ª–∂–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è "
                             "–ø–æ–ª–æ–≤–∏–Ω–∫–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–¥–∞—á–∏?")

            bot.register_next_step_handler(message, ask_3task_cost)

        def ask_3task_cost(message):
            user_id = message.from_user.id
            task_3cost = message.text.strip().lower()
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  task_3cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (task_3cost, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ "
                             "–Ω–∞–≥—Ä–∞–¥–∞—Ö. –ö–∞–∫—É—é –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –≤—ã "
                             "—Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ –æ–±–º–µ–Ω –Ω–∞ –ª—å–≤—è—Ç?")

            bot.register_next_step_handler(message, ask_reward)

        # ----------------------------------------------- #

        def ask_reward(message):
            user_id = message.from_user.id
            user_reward = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_reward = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_reward, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç "
                             "–¥–æ–ª–∂–Ω–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞, "
                             "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É?")

            bot.register_next_step_handler(message, ask_reward_cost)

        def ask_reward_cost(message):
            user_id = message.from_user.id
            reward_cost = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  reward_cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (reward_cost, ),
            )
            conn.commit()
            conn.close()

            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button15")
            button2 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button14")
            markup.add(button1, button2)
            bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã "
                             "–¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è "
                             "–≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?", reply_markup=markup)

        def ask_2reward(message):
            user_id = message.from_user.id
            user_2reward = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_2reward = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_2reward, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç "
                             "–¥–æ–ª–∂–Ω–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è "
                             "–ø–æ–ª–æ–≤–∏–Ω–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Ç–æ—Ä—É—é –Ω–∞–≥—Ä–∞–¥—É?")

            bot.register_next_step_handler(message, ask_2reward_cost)

        def ask_2reward_cost(message):
            user_id = message.from_user.id
            reward_2cost = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  reward_2cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (reward_2cost, ),
            )
            conn.commit()
            conn.close()

            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button15")
            button2 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button17")
            markup.add(button1, button2)
            bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã "
                             "–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ—Ç—å—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è "
                             "–≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?", reply_markup=markup)

        def ask_3reward(message):
            user_id = message.from_user.id
            user_3reward = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_3reward = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_3reward, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç "
                             "–¥–æ–ª–∂–Ω–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è "
                             "–ø–æ–ª–æ–≤–∏–Ω–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ—Ç—å—é –Ω–∞–≥—Ä–∞–¥—É?")

            bot.register_next_step_handler(message, ask_3reward_cost)

        def ask_3reward_cost(message):
            user_id = message.from_user.id
            reward_3cost = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  reward_3cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (reward_3cost, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é "
                             "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –æ –≤–∞—Å:")

            send_user_data(message)

        def send_user_data(call):
            user_id = call.from_user.id
            conn, cursor = get_user_db(user_id)
            cursor.execute(get_data)
            user_data = cursor.fetchone()
            conn.close()
            if user_data:
                (
                    quser_name,
                    soulmate_name,
                    user_task,
                    user_2task,
                    user_3task,
                    task_cost,
                    task_2cost,
                    task_3cost,
                    user_reward,
                    reward_cost,
                    user_2reward,
                    reward_2cost,
                    user_3reward,
                    reward_3cost,
                    l_balance,
                ) = user_data

                response = (
                        f"üíñ{quser_name} –∏ {soulmate_name}üíñ\n"
                        f"–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
                        f"1. {user_task} - –∑–∞ {task_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2task} - –∑–∞ {task_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3task} - –∑–∞ {task_3cost} –ª—å–≤—è—Ç\n"
                        f"–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
                        f"1. {user_reward} - –∑–∞ {reward_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2reward} - –∑–∞ {reward_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3reward} - –∑–∞ {reward_3cost} –ª—å–≤—è—Ç\n"
                        f"–ë–∞–ª–∞–Ω—Å –ª—å–≤—è—Ç: {l_balance}")
            bot.send_message(user_id, response)
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button1")
            button2 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button2")
            markup.add(button1, button2)
            bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                             reply_markup=markup)

        @bot.message_handler(commands=["main"])
        def call2handler(call):
            user_id = call.from_user.id
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "SELECT quser_name, l_balance FROM userdata "
                "WHERE id = (SELECT MAX(id) FROM userdata)"
            )
            user_data = cursor.fetchone()
            quser_name, l_balance = user_data
            markup = telebot.types.InlineKeyboardMarkup()
            button3 = telebot.types.InlineKeyboardButton(
                "–ø—Ä–∏–±–∞–≤–∏—Ç—å ü¶Å", callback_data="button3")
            button4 = telebot.types.InlineKeyboardButton(
                "–≤—ã—á–µ—Å—Ç—å ü¶Å", callback_data="button4")
            markup.row(button3, button4)
            button5 = telebot.types.InlineKeyboardButton(
                "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="button1")
            button6 = telebot.types.InlineKeyboardButton(
                "–¥—Ä—É–≥–æ–µ", callback_data="button6")
            markup.row(button5, button6)
            photo = "lions.png"
            file = open("./" + photo, "rb")
            try:
                bot.send_message(call.message.chat.id,
                                 f"–ü—Ä–∏–≤–µ—Ç, {quser_name}!\nü¶Å: {l_balance}")
                bot.send_photo(call.message.chat.id, file, reply_markup=markup)
            except Exception:
                bot.send_message(call.chat.id,
                                 f"–ü—Ä–∏–≤–µ—Ç, {quser_name}!\nü¶Å: {l_balance}")
                bot.send_photo(call.chat.id, file, reply_markup=markup)

        # ----------------------------------------------- #
        #                   callback                      #
        #                                                 #
        #                                                 #
        #                                                 #
        # ----------------------------------------------- #

        @bot.callback_query_handler(func=lambda call: True)  # main message
        def callback_handler(call):
            user_id = call.from_user.id
            if call.data == "button2":
                call2handler(call)
            elif call.data == "button1":
                bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, "
                                 "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –≤–∞—à–µ –∏–º—è")
                bot.register_next_step_handler(call.message, edit_quser_name)
            elif call.data == "button3":
                bot.send_message(call.message.chat.id, "–°–∫–æ–ª—å–∫–æ?")  # plus
                bot.register_next_step_handler(call.message, pluslions)
            elif call.data == "button4":
                bot.send_message(call.message.chat.id, "–°–∫–æ–ª—å–∫–æ?")  # minus
                bot.register_next_step_handler(call.message, minuslions)
            elif call.data == "button6":
                markup = types.InlineKeyboardMarkup()
                return_button = types.InlineKeyboardButton(
                    "Return", callback_data="button7")
                markup.add(return_button)
                bot.send_message(call.message.chat.id, "you can:")
                bot.send_message(
                    call.message.chat.id,
                    "‚ú®[say thank you](https://www.buymeacoffee.com/)‚ú®",
                    parse_mode="Markdown",
                )
                bot.send_message(
                    call.message.chat.id,
                    "‚ú®[contact me](https://t.me/levaau)‚ú®",
                    parse_mode="Markdown",
                    reply_markup=markup,
                )
            elif call.data == "button7":
                call2handler(call)
            elif call.data == "button8":
                call2handler(call)
            elif call.data == "button9":
                markup = types.InlineKeyboardMarkup()
                return_button = types.InlineKeyboardButton(
                    "Return", callback_data="button7")
                markup.add(return_button)
                bot.send_message(
                    call.message.chat.id,
                    "‚ú®[feel free to contact me](https://t.me/levaau)‚ú®",
                    parse_mode="Markdown",
                    reply_markup=markup,
                )
            elif call.data == "button10":  # same with 13
                bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ "
                                 "–Ω–∞–≥—Ä–∞–¥–∞—Ö. –ö–∞–∫—É—é –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –≤—ã "
                                 "—Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ –æ–±–º–µ–Ω –Ω–∞ –ª—å–≤—è—Ç?")

                bot.register_next_step_handler(call.message, ask_reward)
            elif call.data == "button11":
                bot.send_message(
                    user_id,
                    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! –ö–∞–∫—É—é –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ "
                    "—Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?")
                bot.register_next_step_handler(call.message, ask_user_2task)
            elif call.data == "button12":
                bot.send_message(user_id, "–ü–æ–Ω—è–ª! –ö–∞–∫—É—é —Ç—Ä–µ—Ç—å—é –∑–∞–¥–∞—á—É "
                                 "–≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π "
                                 "–ø–æ–ª–æ–≤–∏–Ω–∫–∏?")

                bot.register_next_step_handler(call.message, ask_user_3task)
            elif call.data == "button14":
                bot.send_message(user_id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –ö–∞–∫—É—é –≤—Ç–æ—Ä—É—é "
                                 "–Ω–∞–≥—Ä–∞–¥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ –æ–±–º–µ–Ω "
                                 "–Ω–∞ –ª—å–≤—è—Ç?")

                bot.register_next_step_handler(call.message, ask_2reward)
            elif call.data == "button15":
                bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é "
                                 "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –æ –≤–∞—Å:")
                send_user_data(call)
            elif call.data == "button17":
                bot.send_message(user_id, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ–µ. "
                                 "–ö–∞–∫—É—é —Ç—Ä–µ—Ç—å—é –Ω–∞–≥—Ä–∞–¥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã "
                                 "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ –æ–±–º–µ–Ω –Ω–∞ –ª—å–≤—è—Ç?")
                bot.register_next_step_handler(call.message, ask_3reward)
            elif call.data == "button18":
                bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö. "
                                 "–ö–∞–∫—É—é –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã "
                                 "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ –æ–±–º–µ–Ω –Ω–∞ –ª—å–≤–æ–≤?")

                bot.register_next_step_handler(call.message, edit_reward)
            elif call.data == "button19":
                bot.send_message(user_id, "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! –ö–∞–∫—É—é –≤—Ç–æ—Ä—É—é "
                                 "–∑–∞–¥–∞—á—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π "
                                 "–ø–æ–ª–æ–≤–∏–Ω–∫–∏?")
                bot.register_next_step_handler(call.message, edit_user_2task)
            elif call.data == "button20":
                bot.send_message(user_id, "–ü–æ–Ω—è–ª! –ö–∞–∫—É—é —Ç—Ä–µ—Ç—å—é –∑–∞–¥–∞—á—É –≤—ã "
                                 "—Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π "
                                 "–ø–æ–ª–æ–≤–∏–Ω–∫–∏?")
                bot.register_next_step_handler(call.message, edit_user_3task)
            elif call.data == "button13":
                bot.send_message(user_id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –ö–∞–∫—É—é –≤—Ç–æ—Ä—É—é "
                                 "–Ω–∞–≥—Ä–∞–¥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ "
                                 "–æ–±–º–µ–Ω –Ω–∞ –ª—å–≤—è—Ç?")
                bot.register_next_step_handler(call.message, ask_2reward)
            elif call.data == "button16":
                bot.send_message(user_id, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ–µ. "
                                 "–ö–∞–∫—É—é —Ç—Ä–µ—Ç—å—é –Ω–∞–≥—Ä–∞–¥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã "
                                 "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ –æ–±–º–µ–Ω –Ω–∞ –ª—å–≤—è—Ç?")
                bot.register_next_step_handler(call.message, edit_3reward)
            elif call.data == "tut1":
                tutorial2(call)
            elif call.data == "tut2":
                tutorial3(call)
            elif call.data == "tut3":
                tutorial4(call)
            elif call.data == "tut4":
                bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, "
                                 "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –≤–∞—à–µ –∏–º—è")
                bot.register_next_step_handler(call.message, ask_quser_name)

        def minuslions(message):
            user_id = message.from_user.id
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "SELECT l_balance FROM userdata WHERE id = (SELECT MAX(id) "
                "FROM userdata)"
            )
            user_data = cursor.fetchone()
            if user_data:
                (l_balance, ) = user_data  # Unpack the value from the tuple
                l_balance_new = int(message.text.strip())
                l_balance -= l_balance_new
                cursor.execute(
                    "UPDATE userdata SET  l_balance = ? WHERE id = "
                    "(SELECT MAX(id) FROM userdata)",
                    (l_balance, ),
                )
                conn.commit()
                conn.close()  # end!!!!
                call2handler(message)
            else:
                bot.send_message(
                    user_id,
                    "Error: User data not found. "
                    "Please make sure you have provided your information.",
                )

        def pluslions(message):
            user_id = message.from_user.id
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "SELECT l_balance FROM userdata WHERE id = "
                "(SELECT MAX(id) FROM userdata)"
            )
            user_data = cursor.fetchone()
            if user_data:
                (l_balance, ) = user_data  # Unpack the value from the tuple
                l_balance_new = int(message.text.strip())
                l_balance += l_balance_new
                cursor.execute(
                    "UPDATE userdata SET  l_balance = ? WHERE id = "
                    "(SELECT MAX(id) FROM userdata)",
                    (l_balance, ),
                )
                conn.commit()
                conn.close()  # end!!!!
                call2handler(message)
            else:
                bot.send_message(
                    user_id,
                    "Error: User data not found. "
                    "Please make sure you have provided your information.",
                )

        # ----------------------------------------------- #
        #                   editinfo                      #
        #                                                 #
        #                                                 #
        #                                                 #
        # ----------------------------------------------- #

        @bot.message_handler(commands=["start_edit_info"])
        def start_edit_info(message):
            user_id = message.from_user.id
            bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                             "—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –≤–∞—à–µ –∏–º—è")

            bot.register_next_step_handler(message, edit_quser_name)

        def edit_quser_name(message):
            user_id = message.from_user.id
            quser_name = message.text.strip().lower()
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  quser_name = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (quser_name, ),
            )
            conn.commit()
            conn.close()
            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –±—ã "
                             "—Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –∏–º—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏")
            bot.register_next_step_handler(message, edit_soulmate_name)

        def edit_soulmate_name(message):
            user_id = message.from_user.id
            soulmate_name = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET soulmate_name = ?"
                "WHERE id = (SELECT MAX(id) FROM userdata)",
                (soulmate_name, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ö–∞–∫—É—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –≤—ã "
                             "—Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?")
            bot.register_next_step_handler(message, edit_user_task)

        def edit_user_task(message):
            user_id = message.from_user.id
            user_task = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_task = ? WHERE id "
                "= (SELECT MAX(id) FROM userdata)",
                (user_task, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç –≤–∞—à–∞ "
                             "–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ "
                             "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏?")

            bot.register_next_step_handler(message, edit_task_cost)

        def edit_task_cost(message):
            # cost
            user_id = message.from_user.id
            task_cost = message.text.strip().lower()
            # sql
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  task_cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (task_cost, ),
            )
            conn.commit()
            conn.close()
            # buttons
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button18")
            button2 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button19")
            markup.add(button1, button2)
            bot.send_message(user_id, "–í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é "
                             "–∑–∞–¥–∞—á—É –¥–ª—è –≤–∞—à–µ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?",
                             reply_markup=markup)

            # bot.register_next_step_handler(message, edit_reward)

        def edit_user_2task(message):
            user_id = message.from_user.id
            user_2task = message.text.strip().lower()
            # sql
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_2task = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_2task, ),
            )
            conn.commit()
            conn.close()
            # cost
            bot.send_message(user_id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –°–∫–æ–ª—å–∫–æ "
                             "–ª—å–≤—è—Ç –¥–æ–ª–∂–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–∞ "
                             "–ø–æ–ª–æ–≤–∏–Ω–∫–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏?")

            bot.register_next_step_handler(message, edit_2task_cost)

        def edit_2task_cost(message):
            user_id = message.from_user.id
            task_2cost = message.text.strip().lower()
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  task_2cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (task_2cost, ),
            )
            conn.commit()
            conn.close()
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button18")
            button2 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button20")
            markup.add(button1, button2)
            bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –¥–æ–±–∞–≤–∏—Ç—å "
                             "—Ç—Ä–µ—Ç—å—é –∑–∞–¥–∞—á—É –¥–ª—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?",
                             reply_markup=markup)

        def edit_user_3task(message):
            user_id = message.from_user.id
            user_3task = message.text.strip().lower()
            # sql
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_3task = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_3task, ),
            )
            conn.commit()
            conn.close()
            # cost
            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç –¥–æ–ª–∂–Ω–∞ "
                             "–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –∑–∞ "
                             "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–¥–∞—á–∏?")

            bot.register_next_step_handler(message, edit_3task_cost)

        def edit_3task_cost(message):
            user_id = message.from_user.id
            task_3cost = message.text.strip().lower()
            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  task_3cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (task_3cost, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö. –ö–∞–∫—É—é "
                             "–ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ "
                             "–æ–±–º–µ–Ω –Ω–∞ –ª—å–≤—è—Ç?")

            bot.register_next_step_handler(message, edit_reward)

        def edit_reward(message):
            user_id = message.from_user.id
            user_reward = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_reward = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (user_reward, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç "
                             "–¥–æ–ª–∂–Ω–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞, "
                             "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É?")

            bot.register_next_step_handler(message, edit_reward_cost)

        def edit_reward_cost(message):
            user_id = message.from_user.id
            reward_cost = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  reward_cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (reward_cost, ),
            )
            conn.commit()
            conn.close()

            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "no", callback_data="button15")
            button2 = telebot.types.InlineKeyboardButton(
                "yes", callback_data="button13")
            markup.add(button1, button2)
            bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –¥–æ–±–∞–≤–∏—Ç—å "
                             "–≤—Ç–æ—Ä—É—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –≤–∞—à–µ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?",
                             reply_markup=markup)

        def edit_2reward(message):
            user_id = message.from_user.id
            user_2reward = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_2reward = ? WHERE "
                "id = (SELECT MAX(id) FROM userdata)",
                (user_2reward, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç "
                             "–¥–æ–ª–∂–Ω–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∫–∞, —á—Ç–æ–±—ã "
                             "–ø–æ–ª—É—á–∏—Ç—å –≤—Ç–æ—Ä—É—é –Ω–∞–≥—Ä–∞–¥—É?")

            bot.register_next_step_handler(message, edit_2reward_cost)

        def edit_2reward_cost(message):
            user_id = message.from_user.id
            reward_2cost = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  reward_2cost = ? WHERE id "
                "= (SELECT MAX(id) FROM userdata)",
                (reward_2cost, ),
            )
            conn.commit()
            conn.close()

            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button15")
            button2 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button16")
            markup.add(button1, button2)
            bot.send_message(message.chat.id, "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –¥–æ–±–∞–≤–∏—Ç—å "
                             "—Ç—Ä–µ—Ç—å—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?",
                             reply_markup=markup)

        def edit_3reward(message):
            user_id = message.from_user.id
            user_3reward = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  user_3reward = ? WHERE "
                "id = (SELECT MAX(id) FROM userdata)",
                (user_3reward, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç "
                             "–¥–æ–ª–∂–Ω–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞, "
                             "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ—Ç—å—é –Ω–∞–≥—Ä–∞–¥—É?")

            bot.register_next_step_handler(message, edit_3reward_cost)

        def edit_3reward_cost(message):
            user_id = message.from_user.id
            reward_3cost = message.text.strip().lower()

            conn, cursor = get_user_db(user_id)
            cursor.execute(
                "UPDATE userdata SET  reward_3cost = ? WHERE id = "
                "(SELECT MAX(id) FROM userdata)",
                (reward_3cost, ),
            )
            conn.commit()
            conn.close()

            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª—å–≤—è—Ç "
                             "–¥–æ–ª–∂–Ω–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è "
                             "–ø–æ–ª–æ–≤–∏–Ω–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ—Ç—å—é –Ω–∞–≥—Ä–∞–¥—É?")

            send_user_data(message)

        @bot.message_handler(commands=["help"])
        def help(message):
            user_id = message.from_user.id
            bot.send_message(user_id, "—Ç—É—Ç —Ç—É—Ç–æ—Ä–∏–∞–ª")
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button9")
            button2 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button8")
            markup.add(button1, button2)
            bot.send_message(user_id, "–í—Å–µ –µ—â–µ –∑–∞–ø—É—Ç–∞–Ω—ã? ü§î",
                             reply_markup=markup)

        @bot.message_handler(commands=["profile"])
        def profile(message):
            user_id = message.from_user.id
            conn, cursor = get_user_db(user_id)
            cursor.execute(get_data)
            user_data = cursor.fetchone()
            conn.close()
            if user_data:
                (
                    quser_name,
                    soulmate_name,
                    user_task,
                    user_2task,
                    user_3task,
                    task_cost,
                    task_2cost,
                    task_3cost,
                    user_reward,
                    reward_cost,
                    user_2reward,
                    reward_2cost,
                    user_3reward,
                    reward_3cost,
                    l_balance,
                ) = user_data

                response = (
                        f"üíñ{quser_name} –∏ {soulmate_name}üíñ\n"
                        f"–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
                        f"1. {user_task} - –∑–∞ {task_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2task} - –∑–∞ {task_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3task} - –∑–∞ {task_3cost} –ª—å–≤—è—Ç\n"
                        f"–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
                        f"1. {user_reward} - –∑–∞ {reward_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2reward} - –∑–∞ {reward_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3reward} - –∑–∞ {reward_3cost} –ª—å–≤—è—Ç\n"
                        f"–ë–∞–ª–∞–Ω—Å –ª—å–≤—è—Ç: {l_balance}")
            photo = "lions2.jpeg"
            file = open("./" + photo, "rb")
            bot.send_photo(user_id, file)
            bot.send_message(user_id, response)
            markup = telebot.types.InlineKeyboardMarkup()
            button1 = telebot.types.InlineKeyboardButton(
                "–¥–∞", callback_data="button1")
            button2 = telebot.types.InlineKeyboardButton(
                "–Ω–µ—Ç", callback_data="button2")
            markup.add(button1, button2)
            bot.send_message(user_id, "want to edit?", reply_markup=markup)

        # ----------------------------------------------- #
        #                   random                        #
        #                                                 #
        #                                                 #
        #                                                 #
        # ----------------------------------------------- #

        tasks = [
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —É–∂–∏–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.",
            "–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–≤–Ω–æ–µ –ø–∏—Å—å–º–æ.",
            "–ò—Å–ø–µ—á—å –ø–µ—á–µ–Ω—å–µ –∏–ª–∏ –∫–µ–∫—Å—ã.",
            "–ü–æ—Å–∞–¥–∏—Ç–µ —Ü–≤–µ—Ç—ã –≤ —Å–∞–¥—É.",
            "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ.",
            "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–∏–∫–Ω–∏–∫.",
            "–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –≤—Å–µ–º–∏ –¥–æ–º–∞—à–Ω–∏–º–∏ –¥–µ–ª–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.",
            "–°–¥–µ–ª–∞–π—Ç–µ –º–∞—Å—Å–∞–∂ —Å—Ç–æ–ø –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É.",
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è –≤ –≤–∞—à–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–µ.",
            "–°–æ–∑–¥–∞–π—Ç–µ –∞–ª—å–±–æ–º –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
            "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤.",
            "–í—ã–º–æ–π—Ç–µ –ø–æ—Å—É–¥—É.",
            "–£–±–µ—Ä–∏—Ç–µ –≤–µ—Å—å –¥–æ–º.",
            "–ü—Ä–æ–ø—ã–ª–µ—Å–æ—Å—å—Ç–µ –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã.",
            "–°—Ö–æ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.",
            "–ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å—Ç–∏—Ä–∫–µ.",
            "–£–±–µ—Ä–∏—Ç–µ —Å–Ω–µ–≥.",
            "–í—ã–≥—É–ª—è–π—Ç–µ –∏ —É—Ö–∞–∂–∏–≤–∞–π—Ç–µ –∑–∞ –¥–æ–º–∞—à–Ω–∏–º –ø–∏—Ç–æ–º—Ü–µ–º.",
            "–£–º–æ–π—Ç–µ –æ–∫–Ω–∞ –∏ –∑–µ—Ä–∫–∞–ª–∞.",
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–ª–∏ –ø–æ—á–∏–Ω–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä.",
            "–í—ã–Ω–µ—Å–∏—Ç–µ –º—É—Å–æ—Ä.",
            "–ó–∞–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–µ–π –∏–∑ —à–∫–æ–ª—ã.",
            "–†–∞–∑–±–µ—Ä–∏—Ç–µ –≤–µ—â–∏ –≤ —à–∫–∞—Ñ—É.",
            "–ó–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª–∏.",
        ]

        rewards = [
            "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏.",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω.",
            "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—É–ª—å—Ç–æ–º –¢–í –Ω–∞ —Ü–µ–ª—ã–π –¥–µ–Ω—å.",
            "–£—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—Å–µ–ª–æ–µ —á–∞–µ–ø–∏—Ç–∏–µ —Å –ø–ª—é—à–µ–≤—ã–º–∏ –∏–≥—Ä—É—à–∫–∞–º–∏.",
            "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–∫–∞–∑–∫—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º —Å –≥–æ–ª–æ—Å–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.",
            "–ü—Ä–æ–∫–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –≤ –ø–∞—Ä–∫–µ.",
            "–†–∏—Å—É–π—Ç–µ –∏ —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ.",
            "–£—Å—Ç—Ä–æ–π—Ç–µ –∫–∏–Ω–æ–Ω–æ—á—å —Å –ª—é–±–∏–º—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏.",
            "–£—Å—Ç—Ä–æ–∏—Ç—å –ø–∏–∫–Ω–∏–∫ –≤–æ –¥–≤–æ—Ä–µ.",
            "–ü—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ –∏ —Å–æ–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç—å—è –∏–ª–∏ –∫–∞–º–Ω–∏.",
            "–°—ã–≥—Ä–∞–π—Ç–µ –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—É—é –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–Ω—É—é –∏–≥—Ä—É.",
            "–£—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Å—Å–∏—é —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞.",
            "–ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∑–∞–∫–∞—Ç–æ–º –∏–ª–∏ –≤–æ—Å—Ö–æ–¥–æ–º —Å–æ–ª–Ω—Ü–∞ –≤–º–µ—Å—Ç–µ.",
            "–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞—É—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç.",
            "–ü–æ—Å–µ—Ç–∏—Ç–µ –º—É–∑–µ–π –∏–ª–∏ –Ω–∞—É—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä.",
            "–£—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä–∞–æ–∫–µ-–≤–µ—á–µ—Ä –¥–æ–º–∞.",
            "–°–æ–∑–¥–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–ø—Å—É–ª—É.",
            "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Å–ø–∞-–¥–µ–Ω—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –º–∞—Å–∫–∞–º–∏.",
            "–ü–æ—Å–µ—Ç–∏—Ç–µ –º–µ—Å—Ç–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.",
            "–ü—Ä–æ–∫–∞—Ç–∏—Ç–µ—Å—å –≤–µ—Ä—Ö–æ–º –Ω–∞ –ª–æ—à–∞–¥–∏ –≤–º–µ—Å—Ç–µ.",
            "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –ø–ª—è–∂–µ.",
            "–°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–µ–∑–¥–∫—É –≤ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥.",
            "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–µ–Ω—å –Ω–∞ –≤—ã–±–æ—Ä –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.",
            "–°—é—Ä–ø—Ä–∏–∑-–ø–æ–¥–∞—Ä–æ–∫.",
            "–î–æ–ª–≥–∏–µ, —Ç–µ–ø–ª—ã–µ –æ–±—ä—è—Ç–∏—è.",
            "–î–µ–Ω—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤.",
            "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.",
            "–î–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.",
        ]

        @bot.message_handler(commands=["suggest"])
        def suggest(message):
            user_id = message.from_user.id
            # random_task = random.choice(tasks)
            # random_reward = random.choice(rewards)
            bot.send_message(
                user_id,
                f"–ó–∞–¥–∞–Ω–∏—è:\n"
                f"1. {random.choice(tasks)}\n"
                f"2. {random.choice(tasks)}\n"
                f"3. {random.choice(tasks)}\n–ù–∞–≥—Ä–∞–¥—ã:\n"
                f"1. {random.choice(rewards)}\n"
                f"2. {random.choice(rewards)}\n"
                f"3. {random.choice(rewards)}",
            )

        @bot.message_handler(commands=["share"])
        def share(message):
            user_id = message.from_user.id
            photo = "lions_share.jpeg"
            file = open("./" + photo, "rb")
            bot.send_photo(user_id, file)
            # terminal
            user = message.from_user
            user_id = user.id
            response = (f"{user_id}")
            bot.send_message(user_id, response)
            # terminal
            # myuuid = uuid.uuid4()
            # print('Your UUID is: ' + str(myuuid))

        @bot.message_handler(commands=["input"])
        def input_p(message):
            bot.send_message(
                message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∫–æ–¥")
            bot.register_next_step_handler(message, inputproccesing)

        def inputproccesing(message):
            try:
                user_id = message.from_user.id
                db_filename = message.text.strip().lower() + '.db'
                conn = sqlite3.connect(db_filename)
                cursor = conn.cursor()
                cursor.execute(get_data)

                user_data = cursor.fetchone()
                conn.close()
                if user_data:
                    (
                        quser_name,
                        soulmate_name,
                        user_task,
                        user_2task,
                        user_3task,
                        task_cost,
                        task_2cost,
                        task_3cost,
                        user_reward,
                        reward_cost,
                        user_2reward,
                        reward_2cost,
                        user_3reward,
                        reward_3cost,
                        l_balance,
                    ) = user_data

                    response = (
                        f"üíñ{quser_name} –∏ {soulmate_name}üíñ\n"
                        f"–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
                        f"1. {user_task} - –∑–∞ {task_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2task} - –∑–∞ {task_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3task} - –∑–∞ {task_3cost} –ª—å–≤—è—Ç\n"
                        f"–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
                        f"1. {user_reward} - –∑–∞ {reward_cost} –ª—å–≤—è—Ç\n"
                        f"2. {user_2reward} - –∑–∞ {reward_2cost} –ª—å–≤—è—Ç\n"
                        f"3. {user_3reward} - –∑–∞ {reward_3cost} –ª—å–≤—è—Ç\n"
                        f"–ë–∞–ª–∞–Ω—Å –ª—å–≤—è—Ç: {l_balance}")
                bot.send_message(user_id, response)
                markup = telebot.types.InlineKeyboardMarkup()
                button1 = telebot.types.InlineKeyboardButton(
                    "–¥–∞", callback_data="button1")
                button2 = telebot.types.InlineKeyboardButton(
                    "–Ω–µ—Ç", callback_data="button2")
                markup.add(button1, button2)
                bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                                 reply_markup=markup)
            except Exception as e:
                bot.send_message(
                    message.chat.id,
                    f"An error occurred "
                    f"while searching the database: {str(e)}",
                )

        bot.infinity_polling(timeout=10, long_polling_timeout=5)

    # ----------------------------------------------- #
    except Exception as e:
        error_message = str(e)
        print(f"An error occurred: {error_message}")
        bot.send_message(me, f"An error occurred: {error_message}")
        bot.send_message(me, "restarting...")
        print(" Stopping the bot...")
        print("# ---------------------end((------------------------- #\n")
        bot.stop_polling()
        time.sleep(1)
